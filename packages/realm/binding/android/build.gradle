import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Paths

buildscript {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
    }
}
apply plugin: 'com.android.library'

static def findReactNative(startDir) {
  def curPath = startDir.toPath().normalize()
  while (curPath) {
    def nodeModules = Paths.get(curPath.toString(), "node_modules")
    def reactNative = Paths.get(nodeModules.toString(), "react-native")
    if (nodeModules.toFile().exists() && reactNative.toFile().exists()) {
      return reactNative.toFile()
    }
    curPath = curPath.getParent()
  }
  throw new GradleException("Unable to find the React Native directory")
}


def sanitizeFilePath(String filePath) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        filePath = filePath.replace(File.separatorChar, '/' as char)
    }
    return filePath
}

def REACT_NATIVE_ROOT_DIR = sanitizeFilePath(findReactNative(rootProject.projectDir).path);

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


android {
    namespace 'io.realm.react'
    compileSdkVersion rootProject.hasProperty('compileSdkVersion') ? rootProject.compileSdkVersion : 28
    buildToolsVersion rootProject.hasProperty('buildToolsVersion') ? rootProject.buildToolsVersion : '28.0.3'
    buildFeatures {
        prefab = true
    }
    defaultConfig {
        minSdkVersion rootProject.hasProperty('minSdkVersion') ? rootProject.minSdkVersion : 16
        targetSdkVersion rootProject.hasProperty('targetSdkVersion') ? rootProject.targetSdkVersion : 28
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared",
                          "-DREACT_NATIVE_ROOT_DIR=${REACT_NATIVE_ROOT_DIR}"
                targets 'realm-js-android-binding'
                cppFlags '-std=c++20'
                abiFilters (*reactNativeArchitectures())
            }
        }
    }

    buildTypes {
        debug {
            jniDebuggable true
            packagingOptions {
                doNotStrip "**/librealm.so"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path file('../../binding/CMakeLists.txt')
            version '3.22.1'
        }
    }
    packagingOptions {
        excludes = [
                "META-INF",
                "META-INF/**",
                "**/libc++_shared.so",
                "**/libfbjni.so",
                "**/libjsi.so",
                "**/libreactnativejni.so",
                "**/libturbomodulejsijni.so",
        ]
    }
}

project.dependencies {
    implementation "com.facebook.react:react-android"
}
