name: "Build test"
description: "Build action for integration tests"
inputs:
  if:
    description: 'Whether to run this job'
    required: false
    default: "true"
  os:
    description: "OS of the system"
    required: true
  arch:
    description: "Architecture"
    required: true
  runner:
    description: "Runner"
    required: true
  container:
    description: "Container"
    required: true
runs:
    using: "composite"
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: "recursive"

    - name: Setup node version
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Get NPM cache directory
      shell: bash
      id: npm-cache-dir
      run: echo "::set-output name=dir::$(npm config get cache)"

    - name: Restore NPM cache
      id: npm-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: MSVC Setup
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1

    # ninja-build is used by default if available and results in faster build times
    # On linux, electron requires a connected display.  We fake this by giving it a headless environment using xvfb
    # Relevant issue: https://github.com/juliangruber/browser-run/issues/147
    - name: Linux Environment setup
      shell: bash
      if: ${{ (inputs.runner == 'ubuntu-latest') && (inputs.container == '') }}
      run: sudo apt-get install ccache ninja-build

    - name: Setup Java
      if: ${{ inputs.os == 'android' }}
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '11'

    - name: Setup Android SDK
      if: ${{ inputs.os == 'android' }}
      uses: android-actions/setup-android@v2

    - name: Install NDK
      shell: bash
      if: ${{ inputs.os == 'android' }}
      run: sdkmanager --install "ndk;${{ env.NDK_VERSION }}"

    # The ccache installed by github doesn't want to be moved around. Let the ccache action download a new one.
    - name: Remove pre-installed ccache
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      # There are two; remove both
      run: |
        rm -fv $(which ccache)
        rm -fv $(which ccache)

    - name: ccache
      uses: hendrikmuhs/ccache-action@bd43b7f5fb36d5f97ef5c6cc818a2055b04f610a
      with:
        key: ${{ runner.os }}-${{ inputs.os }}-${{ inputs.arch }}
        max-size: '2.0G'

    - name: Prepend ccache executables to the PATH
      shell: bash
      if: ${{ runner.os != 'Windows' }}
      run: |
        echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

    # in CI file timestamps change with every run so instead rely on file content hashing
    # https://reactnative.dev/docs/build-speed#using-this-approach-on-a-ci
    - name: Configure ccache
      shell: bash
      run: ccache --set-config="compiler_check=content"

    - name: Install dependencies
      shell: bash
      # Ignoring scripts to prevent a prebuilt from getting fetched / built
      run: npm ci --ignore-scripts

    - name: Insert ccache executables
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      run: |
        cl_exe=$(which cl.exe)
        cl_dir=$(dirname "$cl_exe")
        # For 32-bit it uses a different compiler than the one in the path
        if [ ${{ inputs.arch }} = ia32 ]; then
            cl_dir=$(dirname "$cl_dir")/x86
            cl_exe="$cl_dir/cl.exe"
        fi
        cl_dir_windows="C:${cl_dir#/c}"
        mv -v "$cl_exe" "$cl_dir"/cl-real.exe
        cp -v "$cl_dir"/cl.exe.config "$cl_dir"/cl-real.exe.config
        ccache_exe=$(which ccache.exe)
        cp -v "$ccache_exe" "$cl_dir"/cl.exe
        ls -l "$cl_dir"
        echo "CCACHE_COMPILER=$cl_dir_windows/cl-real.exe" >> $GITHUB_ENV
        echo 'CCACHE_COMPILERTYPE=msvc' >> $GITHUB_ENV
        echo 'CCACHE_STATSLOG=C:\Users\runneradmin\ccache\statslog.txt' >> $GITHUB_ENV
        #echo 'CCACHE_LOGFILE=C:\Users\runneradmin\ccache\logfile.txt' >> $GITHUB_ENV
        # This tells msbuild to compile only one file at a time; ccache needs that.
        echo 'UseMultiToolTask=true' >> $GITHUB_ENV
        echo 'VCPKG_KEEP_ENV_VARS=CCACHE_COMPILER;CCACHE_STATSLOG;CCACHE_LOGFILE;CCACHE_COMPILERTYPE;UseMultiToolTask' >> $GITHUB_ENV

    # build the c++ library for standard targets
    - name: Build node
      shell: bash
      if: ${{ (inputs.os != 'ios') && (inputs.os != 'android') }}
      run: npm run prebuild:node -- --arch=${{inputs.arch}}

    # build the c++ library for IOS
    # the Info.plist needs to be regenerated with all libraries in place
    - name: Build iOS
      shell: bash
      if: ${{ (inputs.os == 'ios') }}
      run: |
        npm run prebuild:ios -- ${{inputs.arch}}
        rm -vf ${{ inputs.artifact-path }}/Info.plist

    # build the c++ library for Android
    - name: Build Android
      shell: bash
      if: ${{ (inputs.os == 'android') }}
      run: npm run prebuild:android -- --arch=${{inputs.arch}}
      env:
        ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}

    # Due to a limitation in upload-artifact a redundant file is needed to force 
    # preserving paths (https://github.com/actions/upload-artifact/issues/174) 
    - name: Upload prebuild artifact
      uses: actions/upload-artifact@v2
      with:
        name: realm-js-prebuilds
        path: |
          dependencies.list
          ${{ inputs.artifact-path }}
